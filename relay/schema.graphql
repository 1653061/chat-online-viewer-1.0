type BasicResponse {
    message: String!
    statusCode: Int!
}

type User {
    _id: ID!
    email: String!
    name: String!
    phone: String
}

type PageInfo {
    hasPreviousPage: Boolean
    hasNextPage: Boolean
    startCursor: String
    endCursor: String
}

type RoomList {
    allRooms(first: Float!, after: String!): RoomsConnection!
}


type RoomsConnection {
    edges: [RoomEdge]!
    pageInfo: PageInfo!
    statusCode: Int!
}

type Room {
    _id: ID!
    id: ID!
    lastMessage: String!
    title: String!
    users: [User]!
}

type RoomEdge {
    cursor: String!
    node: Room!
}

type ChatList {
    allChat(last: Float!, before: String!): ChatConnection!
}


type ChatConnection {
    edges: [ChatEdge]!
    pageInfo: PageInfo!
    statusCode: Int!
}

type Chat {
    _id: ID!
    id: ID!
    ownerId: String!
    message: String!
    ownerName: String!
    createdAt: String!
}

type ChatEdge {
    cursor: String!
    node: Chat!
}


type UserPayload {
    token: String!
    refreshToken: String
    user: User!
}

type CreatedConnectionPayload {
    basicResponse: BasicResponse!
    room: RoomEdge!
}

type EmailVerifyTokenPayload {
    isVerified: Boolean!
}

input CreateUserInput {
    name: String!
    password: String!
    email: String!
    phone: Int!
}

input SignInUserInput {
    email: String!
    password: String!
}

input EmailVerifyTokenInput {
    token: String!
}

input GoogleSigninInput {
    email: String!
    name: String!
}

type Query {
    UserGraphGetInfo: User!
    UserGraphInfo: BasicResponse!
    UserGraphVerifyToken: UserPayload!
    RoomGraphGetAllRoom: RoomList!
    RoomGraphGetAllMessage(roomId: String!): ChatList!
}

type Mutation {
    UserGraphSignUp(input: CreateUserInput!): BasicResponse!
    UserGraphSignIn(input: SignInUserInput!): UserPayload!
    RoomGraphCreateRoom(email: String!): CreatedConnectionPayload!
    UserGraphVerifyEmailToken(input: EmailVerifyTokenInput!): EmailVerifyTokenPayload!
    UserGraphSignInWithGoogle(input: GoogleSigninInput!): UserPayload!
    RoomGraphAddNewChat(message: String!, roomId: String!): BasicResponse!
}

type Subscription {
    chatAdded(roomId: String!): ChatEdge!
}